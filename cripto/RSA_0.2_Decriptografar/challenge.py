from Crypto.Util.number import bytes_to_long, long_to_bytes, getStrongPrime
from math import gcd
from random import randint

def rsa(m: int, e: int, n: int) -> int:
    return pow(m, e, n)

if __name__ == '__main__':
    p: int = 25210565022727198985554698187223754304505035845542860634104367535031921337839753766132579048803284200255522082805984881210666112888166729375258112776105068091024832319648184757728433810598247617302016315713769967834821035680924103243531474945473364793848219964231829659888845276459119437232709850917259335965592689301359027329066483438127618157743205197301347815124574076534505433039382215888089437750410555323530646651161311691209249569938917455490431894495713619675917832156884037125363007278750274668623146041078150365114230382237672904496063989035245208058170046067486341045135227819170968455274991150541336520153
    q: int = 27521906533387569670577096685527372185737658704183356677131947423241732246551620806170755570779192533908730768984144088187453515259737081986512969806831751288772986243966683154219111557382383412945200075294613896367970367845076285650700006413590765411877098629366896247118739441809881672101370756644107187132137659030536695123041061519272432771024410469402415554730976181907693664434998715234986114436487385085181925598342999884111630671687137551798201776793782150482919165186495923839766563101904523064321437850417841585965488490634468064942296523982407072496609926343525348773922126228125571641764169285483006335209
    n: int = p * q
    e: int = 1259438572750942160138573070108318740982439258884182682359773
    # Como calcular o parametro d?
    d: int = 0

    texto_criptografado_int: int = 587670195817513805313533194337656909615289811020091487363348085272671967060866064172661143302511571420262702948322930216629665523954386386746077989043016916265169521374994749648525840303988264618013547281245032772876911857764342146286333067551225440037789117963665253932206610224733445498432391666263545896233581839967174771836335513322326815602294790238179662735567419083129785903409838209026703829333351239058375866477074824769314849957696016141889307889282218518621111187455470371324040426806134475787496221558584342388743674321879331076744405584856883920701555385262017290939186318002692949078834574234586829862537087957467247977356565820308222814038312925943385206697246894883517129684746602151320606616533504619902228020286370361108103029281310234240925977339377570246376841537183882369119320827785859395039815793585591057453178331863432774166277666431839702031202720988249424418793489050133682189705846021331825671804213632730313540061663434528744278945001290841137567988550902402719458107466066472595854578603247306223632390773028585042183968183010862060423119975465172185695440587351133056967803926263318557539297404780578945736681272749461681761650052291445905645637131615829312968978638616224431645221334027570676567209132

    print(f'{texto_criptografado_int=}')

    # Use a funcao rsa para decriptografar a mensagem secreta
    texto_decriptografado_int: int = 0
    print(f'{texto_decriptografado_int=}')

    texto_decriptografado: str = long_to_bytes(texto_decriptografado_int).decode('UTF-8')
    print(f'{texto_decriptografado=}')
    print(f'Flag: EITS{{{texto_decriptografado}}}')

