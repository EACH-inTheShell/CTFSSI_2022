def rsa(m: int, e: int, n: int) -> int:
    return pow(m, e, n)

if __name__ == '__main__':
    p: int = 739944136547903435882465611534045327075895064686951085166362724395958059091262373179158812301636155716467349521759526710551417310555088479006997283801747934997775454065088453032508166295753159668279602663833258057719839627876166406687430632301528087886825000121257672335333269634983672086319763667754495478700579129184164700029501620526444550408593829877898866922191511249082796495760428752652490594893262840259926941230529111388390503844287131564778185562829323092319324334002833719265550195317542022742441275021289890512234548369177828229659062590483275185651700492292920479421862920578494966408616395756636675578961879974601974897276313778998123267124089627264074721876230198033518539131065498285521832786082883154198821728718851616395351864998978927040367368438817250180207737258658925943629829849113074441785892859153037929430782170190887667738476807915367048535751868024994302201621779696588507763153704253477729484882868757132975737478023909497450889049174337788659012711149857286356184318112835877235326260159863966725400398790782143587272113575800144701556307622826146597249379881933169432681430914315510473853211280116594237068224729630936703882168363425023605890632508443192891582749754278981327011733497331749668374513339
    q: int = 738637584120343550182569582750851002952237344473344108944248554946618613160818746750105472726640114048762110122450943216906174422944107429020036980037807506908870197409005004631256356216577956039635633610499689255664488043764527147006331538393987692421897561686779031608931281295066846470456740030061119725638717070625077838706480121796827805292386169027682813895032357257189365308869866885071405220865984221011815451441863841353249006936386921169004059861242418061265372834890678472716871833439073488784409220742483892751582098723981820655253900214026708961003426554073997923561088136889582489368698151045114846407079318686448912484911737794900490167442197134736037956567661302015713205834546969717285058650895944994055315215363770404523666011144690359269001648896716488983543183765148790460597987674443506257405847441576543205666654996558556168827553691730925051599897545554124080712773617479384867128086528793988951365745360569106053342563539601018398682757543115537053057543123515793622572439957541056486480622862722851182619309478927843625321125758273383829541954528141185283668445565067440970626163159063505391846553746088780807080514107521382624239146040822525186044364777708880523316345960920945920610570921465986032122872023
    n: int = p * q
    texto_cifrado_int: int = 189416961107303987430533772720941557448038303199973244623108210824415916243721244666863216672267140987795479847408869902510579905960145188803481773574479713262102833208414204506623434859099530021422933942598784017520190091465216740779467671308049545996083528591663532729553711955800753675624592847675371429483671196549053802858383815747722107845547994310184382707560060955180291156288919040341712885885403206962727819426252039519806528209424184641931482940532740452845172975476888014007541674052208477816015436856505197124568232927189138778600248288781386143197750968178338896818488357992640595086242345537343988584904939531283211977170805978952258577119197842023416721250403817238508683281364857349568466571762091711602776119155798257177760439658821448833419154390284452811610729983915222500820518303272569236022052007367459373210770897301630070142251297350175173718946215691762092070907203820604297999696066386811927167386995050212971364710594745449499224555978080391550301327840372340022988114621203124789122430390299599640475956821878693634613781846538965187939907593991218487783748131944845135587219317970468277304816464635933265604160986381628444247618488147576759397481657328217827203311085666769346122320399357398400670238843080285586524956964809320752601583006076220094890574340813731972576298701856935886112742979542102707560634489612064169531322727784056457300065111952643922773176235264032693186339332770780849580127122346881879631085270738012830524683752484107477637269227401488966019260744290548522838781464931216558418913475003758277215858004587982133092206446603796405076672003757928643812059498516740748494989902929382478999391643960287288420449048470112327626396320110726119848307470969675907315699529963411335494984428207651455291456424020453362435439035925551456367847626712433060875338246518967473191323141292284667449212453435179638723721012578283381768501788406638024858111549445797858737820733624128982361562319395266882397745313008442628372774728504940029068427311182513608490731143653740012998939013397863958621074345929523268432150793611137988587225979309914009717635429099531184253482758719061680336352267591575629272988166819419173925806454113930124665652854794550506846668888827518007198843159319784721433271691564197663496259098304909053294782230385217119571006161012209179664262695725026348619856982589466312708674035207067546831922209349520263345014252446352164070018979850461847960922859918830686565251763389059035891833063957162818
    e: int = 71

    # Ja que a variavel e eh pequena, a mensagem criptografada nunca passa do valor de n
    # Portanto, podemos apenas elevar a mensagem criptografada pelo inverso de e
    texto_decriptografado_int: int = texto_cifrado_int^(1/71)

    # O assert abaixo vai verificar se os resultados realmente batem
    texto_plano_int: int = 1083619802725248274648189279358580
    assert texto_plano_int == texto_decriptografado_int

    print(f'{texto_decriptografado_int=}')
